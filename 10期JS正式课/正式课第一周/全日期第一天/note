1.查看git是否安装成功： git version
可以打印出你的git 版本
2.先在github官网上注册：记住用户名，邮箱和密码
3.配置git
git config --global user.name "github上的用户名"
git config --global user.email "github上的邮箱"
//who are you? ...代表你没有配置成功；
4.建立一个本地仓库：
    1）手动创建一个文件夹
    2）git init
5.提交本地仓库：
    1）本地仓库中一定要有内容；--提交什么？
    2）先建立一个远程仓库：--往哪提交？
    3)链接远程仓库：链接远程通道的命令：git remote add 通道名称 通道地址
        git remote add origin 远程仓库的地址
        git remote add origin https://github.com/leilei1238/test1223.git
        查看是否连接上远程仓库：git remote -v

    4）git 工作流：
        1.git add .    / test11111.txt
        2.git commit -m"注释"     注释：可以是英文或汉字，一定要写
        3.git push origin master
6.把老师的讲义down到本地：
    1）把老师的讲义地址，复制到自己github的地址栏
    老师讲义地址：https://github.com/zhufengpeixun/JavaScript201610.git
    2）fork
    3）拷贝自己github上fork过来的讲义地址；
    4）在本地新建一个文件夹，进入该文件夹的命令行； git clone 地址
    5）关于老师讲义的更新：
        1）连接老师讲义的远程通道 ： git remote add teacher 老师讲义的github地址；
        测试：git remote -v
        2）当老师内容更新的时候；
        git remote update teacher
        git pull teacher master //把已经更新的远程通道的内容，拉倒本地仓库
    6）（如何推送自己的项目到主项目中）学员如何提交作业给老师
        1)通过git工作流，把自己本地仓库的内容提交到自己的远程仓库
             git add .
             git commit -m"注释"
             git push origin master
        2)推送到自己远程后，在远程点击new pull request按钮
    7）老师收到你们请求合并的代码后，会进行merge合并
..................................................................:
1.为何要学预解释：
    1）带var和不带var有区别;
    2)明白为何aInput[i]会报错；
    3）带var和不带var程序都能正常的执行；
    4)最主要的目的，就是规范我们的代码，明白为何会错误；
2.预解释：在JS执行代码前，浏览器会预先对带var和带function的进行提前声明或定义；
声明：浏览器告诉你，有这个一个变量； var a;
定义：浏览器对这个变量进行赋值； a=13;
3.带var 和 带function的，声明和定义不同
带var：只声明不定义
带function:声明+定义
4.内存，主要包含两个：栈内存 和 堆内存
栈内存：浏览器提供了供JS代码执行的环境： 全局作用域+私有作用域
堆内存：是用来存放引用数据类型的数据；
       对象存放的是属性名 和 属性值
       函数：代码字符串；
5.什么叫私有变量：
    1）函数中带var的
    2）形参
6.函数定义有3阶段：
    1）开辟一个空间地址
    2）把函数体中的JS代码做为字符串放在这个空间中
    3）把空间地址赋值给函数名
 函数执行有4阶段：
    1）形成一个私有作用域
    2）形参赋值
    3）预解释
    4）代码从上到下的执行
7.作用域链：
当函数执行的时候，会形成一个私有作用域，我们在私有作用域中查找变量A,如果这个作用域里：
1）有私用变量A：那么整个私有作用域中的A都属于私有变量，跟外界没有任何关系
2）如果没有私有变量A：往上级作用域进行查找，没找到，继续再往上级找。。。。一直找到window还没有，报错;
8.预解释无节操：
1）预解释只会对等号左边带var的声明，不定义
2）自执行函数不进行预解释，只有等执行到的他的时候，声明+定义+调用同步完成；
3）已经声明过的变量，不会进行重复声明
4）条件判断语句中，无论条件是否成立，都会进行预解释；//在IE浏览器下
教训：不要再条件判断语句中写函数的定义阶段：因为他在不同浏览器下预解释不同；
5）return 后面的语句不会进行预解释，但是return下面虽然不执行，但会进行预解释
9.带var 和 不带var的区别：
1）带var：会进行预解释 ； 在全局作用域下，属于全局变量，同时也是window的全局属性；
2）不带var：不会进行预解释； 属于window的全局属性；
10. == 相反 !=
    === 相反 !==



1.注意：如果在head中引入JS的外链，外链中所有的JS代码，一定要在window.onload这个系统事件中；
window.onload：包括页面所有的东西（DOM结构，图片，音频，视频等）都加载完成，才开始执行JS代码；
2.元素==元素节点==标签 他们三个都是一个东西
函数调用==函数执行 也是一个意思；
3.获取页面中元素或者标签的方式：
1）id获取：document.getElementById(id名) // 必须写成驼峰式命名
2）tagName获取：context.getElementsByTagName(标签名)
context(代表可以限定范围的获取)
注意点：通过tagName获取元素，拿到的是一个元素集合，所以，如果我们想获取一个元素，必须加[],否则就是错的；
3）className获取：context.getElementsByClassName(class名);
className获取到的也是一组元素，如果我们想拿到其中一个，也必须加[];
4)name获取：name在页面中相当于id的角色，不能限定返回的用context来获取，只能在document下使用name获取元素；
document.getElementsByName(name名);
name拿到的是一个元素集合，所以，如果我们想获取一个元素，必须加[],否则就是错的；
5)document.documentElement   ->HTML元素；
document.body  -》body元素；
document.documentElement.clientWidth||document.body.clientWidth; //可视区的宽；
document.documentElement.clientHeight||document.body.clientHeight;//可视区的高；
6）context.querySelector()//参数可以是：标签名 class名 id名-->获取的一个元素
7)context.querySelectorAll()//参数可以是：标签名 class名 id名--》获取的是一组元素
4.复习获取元素的方式:
 id
 className--不兼容
 tagName
 name
 document.documentElement
 document.body
 document.documentElement.clientWidth||document.body.clientWidth
 document.documentElement.clientHeight||document.body.clientHeight
 querySelector --#id,.className,标签名
 querySelectorAll --#id, .className,标签名 [0]
5.节点及节点类型
                nodeType         nodeName         nodeValue
  元素节点          1              大写的标签名       null
  文本节点          3              #text           文本内容
  注释节点          8              #comment        注释内容
  document节点      9             #document        null
6.节点关系
   parentNode 父节点 --兼容
   childNodes 子节点：拿到的可能是四种节点类型 --兼容
   children   子元素 --不兼容
   previousSibling 上一个哥哥节点    previousElementSibling：上一个哥哥元素 --不兼容；
   nextSibling 下一个弟弟节点
   firstChild 第一个子节点
   lastChild 最后一个子节点
7.DOM的动态操作
   1）DOM的动态创建
        动态创建一个元素： document.createElement(标签名)； //注意：如果只创建元素，不插入页面指定地方，我们看不到这个元素；
        克隆元素：obj.cloneNode(true) true:深度克隆 false/不写：只克隆表面，不克隆里面
   2）DOM的动态插入
        父级.appendChild(newEle);  //给父容器的末尾添加一个新元素
        父级.insertBefore(newEle,refEle); //把新元素插入到指定元素的前面
   3)移除元素 和 替换元素
        父级.removeChild(要被移出的元素) //在父容器中移出一个元素
        父级.replaceChild(newEle,refEle); //在父容器中用新元素替换指定的元素
8.属性操作：attribute系列
    1）获取属性 getAttribute(‘属性名’)// <p id='123'></p>
    2)设置属性  setAttribute('属性名','属性值')  //<p className='345'></p>
    3）移出属性 removeAttribute('属性名')；
操作属性的方式：
    1）. 和 []
    2)attribute系列
    区别：点 和 attribute
    1)在获取自定义属性的时候：
        点.无法获取标签/元素 身上的自定义属性；
        getAttribute()可以获取元素身上的自定义属性；
    2）在设置自定义属性的时候
        点.设置的自定义属性，可以用点获取到，但是在页面结构中看不到；
        setAttribute()给元素上设置的自定义属性，在页面结构中可以看到；
    3）点 和 attribute 不要混合操作；
9.数组常用方法：
    1）增加，删除和替换 5
    push(); //给数组末尾增加一项
    pop(); //删除数组最后一项
    shift(); //删除数组第一项
    unshift();//给数组开头添加一项
    splice():
        splice(n,m) 删除： 从索引n开始，删除m个；
        splice(n,0,m) 添加、插入： 从索引n开始，删除0个，把m的新内容添加到索引n的前面；
        splice(n,m,x) 替换：从索引n开始，删除m个，替换为x的新内容；
    2）查找和克隆 2
        slice(n,m) 从索引n开始，找到索引m,包前不包后;
        //需求：找到[第n项，第m项]
        slice(n-1,m)
        concat:功能-数组拼接  ary1.concat(ary2,ary3);
        克隆:克隆有三个
        1）slice()/slice(0)
        2)splice(0);
        3)concat(); //ary1.concat()
    3)字符串转数组 2
    toString()  //把数组转成以,形式拼接的字符串
    join(拼接形式) //把数组转成以任意形式拼接的字符串
    配合eval可以实现数学运算；
    eval:把字符串转成JS代码来执行；
    4）数组的排序和排列 2
    排序：sort(function(a,b){return a-b});
    数组翻转：reverse();
    5)数组常用但不兼容的方法： 3
    indexOf():  查找数组中是否有某一项：找到的时候返回对应内容的索引，找不到，返回-1；
    forEach(); 遍历数组中的每一项，也就是数组循环，它没有返回值 --不兼容
    map():功能跟forEach()一样，但是他有返回值；--不兼容
    。。。。。。。。。。。。。。。。。。。。。。
    删除数组最后一项：
    pop() splice(ary.length-1,1) ary.length--   ary.length-=1; ary.length=ary.length-1;
    给数组末尾添加一项
    push()  ary[ary.length]='xxx';  splice(ary.length,0,'xxx');
    数组克隆：
    slice()/slice(0)
    splice(0)
    ary.concat();
 10.数据类型检测：
 typeof
 constructor
 instanceOf
 Object.prototype.toStrng.call();
 11.区分清楚元素和节点
 previousElementSibling 上一个哥哥元素
 previousSibling 上一个哥哥节点
 childNodes 子节点
 children 子元素















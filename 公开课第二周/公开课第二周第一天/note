1. window.onload:等页面所有内容都加载完成的时候，开始执行JS代码；
2.JS输出方式
alert()
confirm() //有两个返回值：true or false;
console.log()
console.dir() //可以打印出对象的详细信息
console.table
document.write() //在window.onload下，会覆盖页面所有内容，所以，慎用；
innerHTML //获取和设置元素里面的内容；
3.对象有两个特征：属性 和 方法；
属性和方法的基本区别：属性没括号，方法有括号；
4.函数由两部分组成：定义和调用
定义阶段有三步骤：
    1.开辟一个空间地址
    2.把函数体内的所有JS代码做为字符串放在内存空间中
    3.把空间地址赋值给函数名；fn=xxff00;
函数执行两步骤：
    1.函数被调用的时候，会形成一个私有作用域
    闭包：私有作用域会保护里面的变量不受外界的干扰，函数的这种保护机制叫做闭包；
    2.当函数调用的时候，内存空间中的字符串，会作为JS代码来执行；
5.JS中的数据类型包含哪些？
基本数据类型和引用数据类型；
基本数据类型：字符串string 数字number 布尔boolean null undefined
引用数据类型：对象数据类型（{},[],/\d+/,new Date）和函数数据类型（function）
6.数据类型检测有几种方式4中：
1）typeof
2)constructor 当前实例所属的类--函数数据类型
3)instanceof  当前实例是否属于某个类 --布尔值
4）Object.prototype.toString.call() //'[object Array]'; -背
7.什么是真，什么是假？
假：false 0 '' NaN null undefined
除了假之外，都是真；
8.其他数据类型转为number数据类型？
    严格转换：Number()
    非严格转换：parseInt() parseFloat();
    转换规律：
    1）false ->0 true->1;
    2)null->0 undefined->NaN;
    3)[] ->先通过toString() ''->0;
其他数据类型转为布尔数据类型？
1)boolean()
2)!
3)!!
4)if(值)
5)if(表达式）
9.流程控制语句：循环 和 判断
循环：for循环 for..in循环 while
当循环次数不确定的时候，用while
循环次数确定的时候 for循环
判断：if...elseif...   switch   三目/三元表达式；
10.运算符：算术运算符（+-*/%） 逻辑运算符（&& ||） 比较运算（== != === !==） 赋值运算符（=）
运算符的优先级：
算术》 比较 》逻辑 》赋值
11.
var a=0
a=10; //赋值
a+=2;//累加
alert(a) //=>12;
12.闭包有几种写法？ 写闭包的时候，前面最好加上;避免出错；
(function(){})();
;~function(){}();
;!function(){}();
;+function(){}();
;-function(){}();
13.循环绑定事件：
1）自定义属性  在自定义属性上存储正确i值； 等号；
2）闭包   在函数的私有作用域中存储正确i值；实参i  形参index;
14.隐式数据类型转换和比较  ==
隐式数据类型转换：- * / %  ==
比较：
1）对象==对象 地址  []==[]->false  {}=={}->false
2)对象==字符串 字符串 []=='';->true
3)对象==数字  数字 []==0;->true   []==1 ->false;
4)对象==布尔值   []==false ->true   ![]==false
5）字符串==数字  数字  ''==0;->true
6）字符串==布尔  数字  ''==false； -》true
7）数字==布尔  1==true =》true； 0==false =》true；
8）null==undefined true
null===undefined false
9)NaN==NaN   false
...........................................................
15.数组常用方法：
    1.方法的作用；
    2.该方法是否需要传参；
    3.该方法是否有返回值；
    4.原数组是否发生改变；

1）增加，删除和替换 5
    push(要添加的内容)
        功能：给数组末尾添加内容
        返回值：新数组的长度
        原数组发生改变

    unshift(要添加的内容)
        功能：给数组开头增加新内容
        返回值：新数组的长度
        原数组发生改变
    pop();
        功能：删除数组最后一项；不需要参数
        返回值：被删除的内容；
        原数组发生改变
    shift():
        功能：删除数组第一项
        返回值：被删除的内容；
        原数组发生改变
    splice()
        splice(n,m) 删除： 从索引n开始，删除m个；
            返回值：被删除的内容以一个新数组的形式返回；
            原数组改变
        splice(n,0,m)添加： 从索引n开始，删除0个，给索引n前面插入要添加的新内容；
            没有返回值
        splice(n,m,x)替换： 从索引n开始，删除m个，替换为x的新内容；
            返回值：被删除的内容以一个新数组的形式返回；
            原数组改变
2)查找和克隆 2
    slice(n,m) 从索引n找到索引m；包前不包后
        返回值：被找到的内容以一个新数组的形式返回；
        原数组不变
    需求：找到[第n项,第m项]； [2,10]
    slice(n-1,m)
    concat(); 数组拼接
        返回值：被拼接后的数组
        原数组不变；
    克隆：
    1）slice(0)  // slice();
    2)splice(0)
    3)ary.concat()
 3)数组转字符 2
    toString(); 把数组转成字符串:转成以逗号分隔的字符串
    原数组不变
    返回值：字符串；
    join(拼接形式)  配合eval：把字符串做为JS代码来执行；
    可以用eval配合join实现数学运算；
    eval(ary.join(+)) 同理：-/%；
 4）排序和排列 2
    ary.sort(function(a,b){ return a-b }) 排序：
    返回值：经过排序后的数组
    原数组改变

    reverse() 数据翻转
    返回值：翻转后的数组
    原数组改变
 5）常用但不兼容的方法；
    indexOf(要查找的内容) 查找
        返回值：返回被找到内容的索引； 如果没找到返回-1;
        原数组不变
    forEach() 遍历数组
        forEach有2参数：callback回调函数，用来改变this指向；
         callback回调函数中有三个参数：item，index，input原数组
         forEach没有返回值
    map();和forEach的功能一样；
    区别：有返回值；


16.接受参数的两种形式
1)函数自带的参数机制：arguments;
2)形参
17.排序：快速排序 插入排序  冒泡排序 数组去重；
18.快速排序：
var ary=[34,21,23,6,4];
1)先找到中间的位置 var num=Math.floor(ary.length/2);
2)中间位置对应的值 var numValue=ary.splice(num,1)[0];
3)拿数组中的每个值跟numValue进行比较，比他小的，放左边的数组；比他大的，放右边的数组；
4）最后我们直接返回 left.concat([numValue],right)
注意：1.对于相同功能的代码，只需要封装1次；
5）对于每次拆分前，先判断时候满足拆分的条件：当数组长度<=1的时候，不再拆分，直接输出即可；
19.插入排序
var ary=[21,23,6,4];
1.先给左手一张牌，左手[34]; left=ary.splice(0,1);
2.拿ary中的每张牌 跟左手中的每张牌 进行 从后往前的比对 ，如果比他大，应该插入左手这张牌的下张牌的前面；如果比他小，且已经比到头，直接插入左手的第一张牌；

left[4,6,21,23,34]
功能：数组排序
参数：乱序的数组
返回值：left排好序的数组











